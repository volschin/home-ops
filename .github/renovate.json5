{
  $schema: 'https://docs.renovatebot.com/renovate-schema.json',
  extends: [
    'local>volschin/renovate-config',
    'replacements:k8s-registry-move',
    'replacements:containerbase',
    'github>onedr0p/home-ops//.github/renovate/grafanaDashboards.json5',
  ],
  flux: {
    fileMatch: [
      '(^|/)kubernetes/.+\\.ya?ml$',
    ],
  },
  'helm-values': {
    fileMatch: [
      '(^|/)kubernetes/.+\\.ya?ml$',
    ],
  },
  helmfile: {
    fileMatch: [
      '(^|/)helmfile\\.ya?ml$',
    ],
  },
  kubernetes: {
    fileMatch: [
      '(^|/)kubernetes/.+\\.ya?ml$',
    ],
  },
  kustomize: {
    fileMatch: [
      '(^|/)kustomization\\.ya?ml$',
    ],
  },
  pip_requirements: {
    fileMatch: [
      '(^|/)[\\w-]*requirements(-\\w+)?\\.(txt|pip)$',
    ],
  },
  packageRules: [
    {
      description: 'Auto merge Github Actions',
      matchManagers: [
        'github-actions',
      ],
      automerge: true,
      automergeType: 'branch',
      automergeSchedule: [
        'before 7am on Monday',
      ],
      ignoreTests: true,
      matchUpdateTypes: [
        'minor',
        'patch',
        'digest',
      ],
    },
    {
      description: 'Auto-merge container digests and patch updates for trusted containers',
      matchDatasources: [
        'docker',
      ],
      automerge: true,
      automergeType: 'branch',
      matchUpdateTypes: [
        'patch',
        'digest',
      ],
      matchPackageNames: [
        '/ghcr.io/bjw-s/',
        '/ghcr.io/onedr0p/',
        '/ghcr.io/volschin/',
      ],
      prPriority: 5,
    },
    {
      description: [
        'Flux Group',
      ],
      groupName: 'Flux',
      matchDatasources: [
        'docker',
        'github-tags',
      ],
      versioning: 'semver',
      minimumReleaseAge: '7 days',
      internalChecksFilter: 'strict',
      group: {
        commitMessageTopic: '{{{groupName}}} group',
      },
      matchPackageNames: [
        '/fluxcd/',
      ],
    },
    {
      description: [
        'Talos Group',
      ],
      groupName: 'Talos',
      matchDatasources: [
        'docker',
      ],
      minimumReleaseAge: '3 days',
      internalChecksFilter: 'strict',
      group: {
        commitMessageTopic: '{{{groupName}}} group',
      },
      matchPackageNames: [
        '/siderolabs/talosctl/',
        '/siderolabs/installer/',
      ],
      prPriority: -5
    },
    {
      description: [
        'Actions Runner Group',
      ],
      groupName: 'Actions Runner',
      matchDatasources: [
        'docker',
        'helm',
      ],
      group: {
        commitMessageTopic: '{{{groupName}}} group',
      },
      matchPackageNames: [
        '/gha-runner-scale-set-controller/',
        '/gha-runner-scale-set/',
      ],
    },
    {
      description: [
        'Dragonfly Group',
      ],
      groupName: 'Dragonfly',
      matchDatasources: [
        'docker',
        'github-releases',
      ],
      group: {
        commitMessageTopic: '{{{groupName}}} group',
      },
      matchPackageNames: [
        '/dragonfly(?:db)?.operator/',
      ],
    },
    {
      description: [
        'Intel Device Plugins Group',
      ],
      groupName: 'Intel-Device-Plugins',
      matchDatasources: [
        'helm',
      ],
      group: {
        commitMessageTopic: '{{{groupName}}} group',
      },
      matchPackageNames: [
        '/intel-device-plugins/',
      ],
    },
    {
      description: [
        'Volsync Group',
      ],
      groupName: 'Volsync',
      matchDatasources: [
        'docker',
        'helm',
      ],
      matchUpdateTypes: [
        'minor',
        'patch',
      ],
      group: {
        commitMessageTopic: '{{{groupName}}} group',
      },
      matchPackageNames: [
        '/volsync/',
      ],
    },
    {
      matchDatasources: [
        'helm',
      ],
      commitMessageTopic: 'chart {{depName}}',
      commitMessageExtra: ' ( {{currentVersion}} → {{newVersion}} )',
      prPriority: 4
    },
    {
      matchDatasources: [
        'docker',
      ],
      commitMessageTopic: 'image {{depName}}',
      commitMessageExtra: ' ( {{currentVersion}} → {{newVersion}} )',
    },
    {
      matchDatasources: [
        'docker',
      ],
      matchUpdateTypes: [
        'major',
      ],
      minimumReleaseAge: '3 days',
      internalChecksFilter: 'strict',
      commitMessagePrefix: 'feat(container)!: ',
      prPriority: -5
    },
    {
      matchDatasources: [
        'docker',
      ],
      matchUpdateTypes: [
        'minor',
      ],
      semanticCommitType: 'feat',
      semanticCommitScope: 'container',
    },
    {
      matchDatasources: [
        'docker',
      ],
      matchUpdateTypes: [
        'patch',
      ],
      semanticCommitType: 'fix',
      semanticCommitScope: 'container',
      prPriority: 6
    },
    {
      matchDatasources: [
        'docker',
      ],
      matchUpdateTypes: [
        'digest',
      ],
      semanticCommitType: 'chore',
      semanticCommitScope: 'container',
      commitMessageExtra: '( {{currentDigestShort}} → {{newDigestShort}} )',
    },
    {
      matchDatasources: [
        'helm',
      ],
      matchUpdateTypes: [
        'major',
      ],
      commitMessagePrefix: 'feat(helm)!: ',
    },
    {
      matchDatasources: [
        'helm',
      ],
      matchUpdateTypes: [
        'minor',
      ],
      semanticCommitType: 'feat',
      semanticCommitScope: 'helm',
    },
    {
      matchDatasources: [
        'helm',
      ],
      matchUpdateTypes: [
        'patch',
      ],
      semanticCommitType: 'fix',
      semanticCommitScope: 'helm',
      prPriority: 5
    },
    {
      matchDatasources: [
        'github-releases',
        'github-tags',
      ],
      matchUpdateTypes: [
        'major',
      ],
      commitMessagePrefix: 'feat(github-release)!: ',
      prPriority: -4
    },
    {
      matchDatasources: [
        'github-releases',
        'github-tags',
      ],
      matchUpdateTypes: [
        'minor',
      ],
      semanticCommitType: 'feat',
      semanticCommitScope: 'github-release',
    },
    {
      matchDatasources: [
        'github-releases',
        'github-tags',
      ],
      matchUpdateTypes: [
        'patch',
      ],
      semanticCommitType: 'fix',
      semanticCommitScope: 'github-release',
    },
    {
      matchManagers: [
        'github-actions',
      ],
      matchUpdateTypes: [
        'major',
      ],
      commitMessagePrefix: 'feat(github-action)!: ',
    },
    {
      matchManagers: [
        'github-actions',
      ],
      matchUpdateTypes: [
        'minor',
      ],
      semanticCommitType: 'feat',
      semanticCommitScope: 'github-action',
    },
    {
      matchManagers: [
        'github-actions',
      ],
      matchUpdateTypes: [
        'patch',
      ],
      semanticCommitType: 'fix',
      semanticCommitScope: 'github-action',
    },
    {
      matchUpdateTypes: [
        'major',
      ],
      labels: [
        'type/major',
      ],
    },
    {
      matchUpdateTypes: [
        'minor',
      ],
      labels: [
        'type/minor',
      ],
    },
    {
      matchUpdateTypes: [
        'patch',
      ],
      labels: [
        'type/patch',
      ],
    },
    {
      matchDatasources: [
        'docker',
      ],
      addLabels: [
        'renovate/container',
      ],
    },
    {
      matchDatasources: [
        'helm',
      ],
      addLabels: [
        'renovate/helm',
      ],
    },
    {
      matchDatasources: [
        'github-releases',
        'github-tags',
      ],
      addLabels: [
        'renovate/github-release',
      ],
    },
    {
      matchManagers: [
        'github-actions',
      ],
      addLabels: [
        'renovate/github-action',
      ],
    },
    {
      matchManagers: [
        'pre-commit',
      ],
      addLabels: [
        'renovate/pre-commit',
      ],
    },
  ],
  customManagers: [
    {
      customType: 'regex',
      description: [
        'Process custom dependencies',
      ],
      fileMatch: [
        '(^|/)kubernetes/.+\\.ya?ml(?:\\.j2)?$',
      ],
      matchStrings: [
        'datasource=(?<datasource>\\S+) depName=(?<depName>\\S+)( repository=(?<registryUrl>\\S+))?\\n.+: (&\\S+\\s)?(?<currentValue>\\S+)',
        'depName=(?<depName>\\S+) datasource=(?<datasource>\\S+)\\n.+/(?<currentValue>(v|\\d)[^/]+)',
      ],
      datasourceTemplate: '{{#if datasource}}{{{datasource}}}{{else}}github-releases{{/if}}',
    },
  ],
}
